//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 3.0.1185.0 using the following command:
// XmlSchemaClassGenerator.Console -v --output C:\Projetos.git\Recursos.C#.IWTNfeCompleto\BibliotecasDatasets\novo --namespace IWTNFCompleto.BibliotecaDatasets.v4_0 --separateFiles --collectionSettersMode Public --namingScheme Legacy --typeNameSubstituteFile C:\Projetos.git\Recursos.C#.IWTNfeCompleto\correcoes.map C:\Temp\PL_009\retEnviNFe_v4.00.xsd
namespace IWTNFCompleto.BibliotecaDatasets.v4_0
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "3.0.1185.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("TNFeInfNFeIde", Namespace="http://www.portalfiscal.inf.br/nfe", AnonymousType=true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TNFeInfNFeIde
    {
        
        /// <summary>
        /// <para>Código da UF do emitente do Documento Fiscal. Utilizar a Tabela do IBGE.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Código da UF do emitente do Documento Fiscal. Utilizar a Tabela do IBGE.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("cUF")]
        public IWTNFCompleto.BibliotecaDatasets.v4_0.TCodUfIBGE cUF { get; set; }
        
        /// <summary>
        /// <para>Código numérico que compõe a Chave de Acesso. Número aleatório gerado pelo emitente para cada NF-e.</para>
        /// <para xml:lang="en">Pattern: [0-9]{8}.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Código numérico que compõe a Chave de Acesso. Número aleatório gerado pelo emiten" +
            "te para cada NF-e.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{8}")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("cNF")]
        public string cNF { get; set; }
        
        /// <summary>
        /// <para>Descrição da Natureza da Operação</para>
        /// <para xml:lang="en">Minimum length: 1.</para>
        /// <para xml:lang="en">Maximum length: 60.</para>
        /// <para xml:lang="en">Pattern: [!-ÿ]{1}[ -ÿ]{0,}[!-ÿ]{1}|[!-ÿ]{1}.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Descrição da Natureza da Operação")]
        [System.ComponentModel.DataAnnotations.MinLengthAttribute(1)]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(60)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[!-ÿ]{1}[ -ÿ]{0,}[!-ÿ]{1}|[!-ÿ]{1}")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=false)]
        [System.Xml.Serialization.XmlElementAttribute("natOp")]
        public string natOp { get; set; }
        
        /// <summary>
        /// <para>Código do modelo do Documento Fiscal. 55 = NF-e; 65 = NFC-e.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Código do modelo do Documento Fiscal. 55 = NF-e; 65 = NFC-e.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("mod")]
        public IWTNFCompleto.BibliotecaDatasets.v4_0.TMod mod { get; set; }
        
        /// <summary>
        /// <para>Série do Documento Fiscal
        ///série normal 0-889
        ///Avulsa Fisco 890-899
        ///SCAN 900-999</para>
        /// <para>Tipo Série do Documento Fiscal</para>
        /// <para xml:lang="en">Pattern: 0|[1-9]{1}[0-9]{0,2}.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Série do Documento Fiscal série normal 0-889 Avulsa Fisco 890-899 SCAN 900-999")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("0|[1-9]{1}[0-9]{0,2}")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("serie")]
        public string serie { get; set; }
        
        /// <summary>
        /// <para>Número do Documento Fiscal</para>
        /// <para>Tipo Número do Documento Fiscal</para>
        /// <para xml:lang="en">Pattern: [1-9]{1}[0-9]{0,8}.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Número do Documento Fiscal")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[1-9]{1}[0-9]{0,8}")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("nNF")]
        public string nNF { get; set; }
        
        /// <summary>
        /// <para>Data e Hora de emissão do Documento Fiscal (AAAA-MM-DDThh:mm:ssTZD) ex.: 2012-09-01T13:00:00-03:00</para>
        /// <para>Data e Hora, formato UTC (AAAA-MM-DDThh:mm:ssTZD, onde TZD = +hh:mm ou -hh:mm)</para>
        /// <para xml:lang="en">Pattern: (((20(([02468][048])|([13579][26]))-02-29))|(20[0-9][0-9])-((((0[1-9])|(1[0-2]))-((0[1-9])|(1\d)|(2[0-8])))|((((0[13578])|(1[02]))-31)|(((0[1,3-9])|(1[0-2]))-(29|30)))))T(20|21|22|23|[0-1]\d):[0-5]\d:[0-5]\d([\-,\+](0[0-9]|10|11):00|([\+](12):00)).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Data e Hora de emissão do Documento Fiscal (AAAA-MM-DDThh:mm:ssTZD) ex.: 2012-09-" +
            "01T13:00:00-03:00")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("(((20(([02468][048])|([13579][26]))-02-29))|(20[0-9][0-9])-((((0[1-9])|(1[0-2]))-" +
            "((0[1-9])|(1\\d)|(2[0-8])))|((((0[13578])|(1[02]))-31)|(((0[1,3-9])|(1[0-2]))-(29" +
            "|30)))))T(20|21|22|23|[0-1]\\d):[0-5]\\d:[0-5]\\d([\\-,\\+](0[0-9]|10|11):00|([\\+](12" +
            "):00))")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("dhEmi")]
        public string dhEmi { get; set; }
        
        /// <summary>
        /// <para>Data e Hora da saída ou de entrada da mercadoria / produto (AAAA-MM-DDTHH:mm:ssTZD)</para>
        /// <para>Data e Hora, formato UTC (AAAA-MM-DDThh:mm:ssTZD, onde TZD = +hh:mm ou -hh:mm)</para>
        /// <para xml:lang="en">Pattern: (((20(([02468][048])|([13579][26]))-02-29))|(20[0-9][0-9])-((((0[1-9])|(1[0-2]))-((0[1-9])|(1\d)|(2[0-8])))|((((0[13578])|(1[02]))-31)|(((0[1,3-9])|(1[0-2]))-(29|30)))))T(20|21|22|23|[0-1]\d):[0-5]\d:[0-5]\d([\-,\+](0[0-9]|10|11):00|([\+](12):00)).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Data e Hora da saída ou de entrada da mercadoria / produto (AAAA-MM-DDTHH:mm:ssTZ" +
            "D)")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("(((20(([02468][048])|([13579][26]))-02-29))|(20[0-9][0-9])-((((0[1-9])|(1[0-2]))-" +
            "((0[1-9])|(1\\d)|(2[0-8])))|((((0[13578])|(1[02]))-31)|(((0[1,3-9])|(1[0-2]))-(29" +
            "|30)))))T(20|21|22|23|[0-1]\\d):[0-5]\\d:[0-5]\\d([\\-,\\+](0[0-9]|10|11):00|([\\+](12" +
            "):00))")]
        [System.Xml.Serialization.XmlElementAttribute("dhSaiEnt")]
        public string dhSaiEnt { get; set; }
        
        /// <summary>
        /// <para>Tipo do Documento Fiscal (0 - entrada; 1 - saída)</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Tipo do Documento Fiscal (0 - entrada; 1 - saída)")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("tpNF")]
        public TNFeInfNFeIdeTpNF tpNF { get; set; }
        
        /// <summary>
        /// <para>Identificador de Local de destino da operação (1-Interna;2-Interestadual;3-Exterior)</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identificador de Local de destino da operação (1-Interna;2-Interestadual;3-Exteri" +
            "or)")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("idDest")]
        public TNFeInfNFeIdeIdDest idDest { get; set; }
        
        /// <summary>
        /// <para>Código do Município de Ocorrência do Fato Gerador (utilizar a tabela do IBGE)</para>
        /// <para>Tipo Código do Município da tabela do IBGE</para>
        /// <para xml:lang="en">Pattern: [0-9]{7}.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Código do Município de Ocorrência do Fato Gerador (utilizar a tabela do IBGE)")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{7}")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("cMunFG")]
        public string cMunFG { get; set; }
        
        /// <summary>
        /// <para>Formato de impressão do DANFE (0-sem DANFE;1-DANFe Retrato; 2-DANFe Paisagem;3-DANFe Simplificado;
        ///											4-DANFe NFC-e;5-DANFe NFC-e em mensagem eletrônica)</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Formato de impressão do DANFE (0-sem DANFE;1-DANFe Retrato; 2-DANFe Paisagem;3-DA" +
            "NFe Simplificado; 4-DANFe NFC-e;5-DANFe NFC-e em mensagem eletrônica)")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("tpImp")]
        public TNFeInfNFeIdeTpImp tpImp { get; set; }
        
        /// <summary>
        /// <para>Forma de emissão da NF-e
        ///1 - Normal;
        ///2 - Contingência FS
        ///3 - Regime Especial NFF (NT 2021.002)
        ///4 - Contingência DPEC
        ///5 - Contingência FSDA
        ///6 - Contingência SVC - AN
        ///7 - Contingência SVC - RS
        ///9 - Contingência off-line NFC-e</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Forma de emissão da NF-e 1 - Normal; 2 - Contingência FS 3 - Regime Especial NFF " +
            "(NT 2021.002) 4 - Contingência DPEC 5 - Contingência FSDA 6 - Contingência SVC -" +
            " AN 7 - Contingência SVC - RS 9 - Contingência off-line NFC-e")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("tpEmis")]
        public TNFeInfNFeIdeTpEmis tpEmis { get; set; }
        
        /// <summary>
        /// <para>Digito Verificador da Chave de Acesso da NF-e</para>
        /// <para xml:lang="en">Pattern: [0-9]{1}.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Digito Verificador da Chave de Acesso da NF-e")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{1}")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("cDV")]
        public string cDV { get; set; }
        
        /// <summary>
        /// <para>Identificação do Ambiente:
        ///1 - Produção
        ///2 - Homologação</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Identificação do Ambiente: 1 - Produção 2 - Homologação")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("tpAmb")]
        public IWTNFCompleto.BibliotecaDatasets.v4_0.TAmb tpAmb { get; set; }
        
        /// <summary>
        /// <para>Finalidade da emissão da NF-e:
        ///1 - NFe normal
        ///2 - NFe complementar
        ///3 - NFe de ajuste
        ///4 - Devolução/Retorno</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Finalidade da emissão da NF-e: 1 - NFe normal 2 - NFe complementar 3 - NFe de aju" +
            "ste 4 - Devolução/Retorno")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("finNFe")]
        public TFinNFe finNFe { get; set; }
        
        /// <summary>
        /// <para>Indica operação com consumidor final (0-Não;1-Consumidor Final)</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Indica operação com consumidor final (0-Não;1-Consumidor Final)")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("indFinal")]
        public TNFeInfNFeIdeIndFinal indFinal { get; set; }
        
        /// <summary>
        /// <para>Indicador de presença do comprador no estabelecimento comercial no momento da oepração
        ///											(0-Não se aplica (ex.: Nota Fiscal complementar ou de ajuste;1-Operação presencial;2-Não presencial, internet;3-Não presencial, teleatendimento;4-NFC-e entrega em domicílio;5-Operação presencial, fora do estabelecimento;9-Não presencial, outros)</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"Indicador de presença do comprador no estabelecimento comercial no momento da oepração (0-Não se aplica (ex.: Nota Fiscal complementar ou de ajuste;1-Operação presencial;2-Não presencial, internet;3-Não presencial, teleatendimento;4-NFC-e entrega em domicílio;5-Operação presencial, fora do estabelecimento;9-Não presencial, outros)")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("indPres")]
        public TNFeInfNFeIdeIndPres indPres { get; set; }
        
        /// <summary>
        /// <para>Indicador de intermediador/marketplace 
        ///											0=Operação sem intermediador (em site ou plataforma própria) 
        ///											1=Operação em site ou plataforma de terceiros (intermediadores/marketplace)</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Indicador de intermediador/marketplace 0=Operação sem intermediador (em site ou p" +
            "lataforma própria) 1=Operação em site ou plataforma de terceiros (intermediadore" +
            "s/marketplace)")]
        [System.Xml.Serialization.XmlElementAttribute("indIntermed")]
        public TNFeInfNFeIdeIndIntermed indIntermed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the indIntermed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool indIntermedSpecified { get; set; }
        
        /// <summary>
        /// <para>Processo de emissão utilizado com a seguinte codificação:
        ///0 - emissão de NF-e com aplicativo do contribuinte;
        ///1 - emissão de NF-e avulsa pelo Fisco;
        ///2 - emissão de NF-e avulsa, pelo contribuinte com seu certificado digital, através do site
        ///do Fisco;
        ///3- emissão de NF-e pelo contribuinte com aplicativo fornecido pelo Fisco.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute(@"Processo de emissão utilizado com a seguinte codificação: 0 - emissão de NF-e com aplicativo do contribuinte; 1 - emissão de NF-e avulsa pelo Fisco; 2 - emissão de NF-e avulsa, pelo contribuinte com seu certificado digital, através do site do Fisco; 3- emissão de NF-e pelo contribuinte com aplicativo fornecido pelo Fisco.")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=true)]
        [System.Xml.Serialization.XmlElementAttribute("procEmi")]
        public TProcEmi procEmi { get; set; }
        
        /// <summary>
        /// <para>versão do aplicativo utilizado no processo de
        ///emissão</para>
        /// <para xml:lang="en">Minimum length: 1.</para>
        /// <para xml:lang="en">Maximum length: 20.</para>
        /// <para xml:lang="en">Pattern: [!-ÿ]{1}[ -ÿ]{0,}[!-ÿ]{1}|[!-ÿ]{1}.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("versão do aplicativo utilizado no processo de emissão")]
        [System.ComponentModel.DataAnnotations.MinLengthAttribute(1)]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(20)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[!-ÿ]{1}[ -ÿ]{0,}[!-ÿ]{1}|[!-ÿ]{1}")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute(AllowEmptyStrings=false)]
        [System.Xml.Serialization.XmlElementAttribute("verProc")]
        public string verProc { get; set; }
        
        /// <summary>
        /// <para>Informar a data e hora de entrada em contingência contingência no formato  (AAAA-MM-DDThh:mm:ssTZD) ex.: 2012-09-01T13:00:00-03:00.</para>
        /// <para>Data e Hora, formato UTC (AAAA-MM-DDThh:mm:ssTZD, onde TZD = +hh:mm ou -hh:mm)</para>
        /// <para xml:lang="en">Pattern: (((20(([02468][048])|([13579][26]))-02-29))|(20[0-9][0-9])-((((0[1-9])|(1[0-2]))-((0[1-9])|(1\d)|(2[0-8])))|((((0[13578])|(1[02]))-31)|(((0[1,3-9])|(1[0-2]))-(29|30)))))T(20|21|22|23|[0-1]\d):[0-5]\d:[0-5]\d([\-,\+](0[0-9]|10|11):00|([\+](12):00)).</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Informar a data e hora de entrada em contingência contingência no formato (AAAA-M" +
            "M-DDThh:mm:ssTZD) ex.: 2012-09-01T13:00:00-03:00.")]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("(((20(([02468][048])|([13579][26]))-02-29))|(20[0-9][0-9])-((((0[1-9])|(1[0-2]))-" +
            "((0[1-9])|(1\\d)|(2[0-8])))|((((0[13578])|(1[02]))-31)|(((0[1,3-9])|(1[0-2]))-(29" +
            "|30)))))T(20|21|22|23|[0-1]\\d):[0-5]\\d:[0-5]\\d([\\-,\\+](0[0-9]|10|11):00|([\\+](12" +
            "):00))")]
        [System.Xml.Serialization.XmlElementAttribute("dhCont")]
        public string dhCont { get; set; }
        
        /// <summary>
        /// <para>Informar a Justificativa da entrada</para>
        /// <para xml:lang="en">Minimum length: 15.</para>
        /// <para xml:lang="en">Maximum length: 256.</para>
        /// <para xml:lang="en">Pattern: [!-ÿ]{1}[ -ÿ]{0,}[!-ÿ]{1}|[!-ÿ]{1}.</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Informar a Justificativa da entrada")]
        [System.ComponentModel.DataAnnotations.MinLengthAttribute(15)]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(256)]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[!-ÿ]{1}[ -ÿ]{0,}[!-ÿ]{1}|[!-ÿ]{1}")]
        [System.Xml.Serialization.XmlElementAttribute("xJust")]
        public string xJust { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TNFeInfNFeIdeNFref> _nFref;
        
        /// <summary>
        /// <para>Grupo de infromações da NF referenciada</para>
        /// </summary>
        [System.ComponentModel.DescriptionAttribute("Grupo de infromações da NF referenciada")]
        [System.Xml.Serialization.XmlElementAttribute("NFref")]
        public System.Collections.ObjectModel.Collection<TNFeInfNFeIdeNFref> NFref
        {
            get
            {
                return _nFref;
            }
            set
            {
                _nFref = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the NFref collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NFrefSpecified
        {
            get
            {
                return ((this.NFref != null) 
                            && (this.NFref.Count != 0));
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TNFeInfNFeIde" /> class.</para>
        /// </summary>
        public TNFeInfNFeIde()
        {
            this._nFref = new System.Collections.ObjectModel.Collection<TNFeInfNFeIdeNFref>();
        }
    }
}
